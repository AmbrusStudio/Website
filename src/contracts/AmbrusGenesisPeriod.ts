/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { EventFragment, FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils
} from 'ethers'

import type { OnEvent, PromiseOrValue, TypedEvent, TypedEventFilter, TypedListener } from './common'

export declare namespace AmbrusGenesisPeriod {
  export type WhitelistSaleConfigStruct = {
    mintQuota: PromiseOrValue<BigNumberish>
    startTime: PromiseOrValue<BigNumberish>
    endTime: PromiseOrValue<BigNumberish>
    merkleRoot: PromiseOrValue<BytesLike>
    price: PromiseOrValue<BigNumberish>
  }

  export type WhitelistSaleConfigStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    mintQuota: BigNumber
    startTime: BigNumber
    endTime: BigNumber
    merkleRoot: string
    price: BigNumber
  }

  export type PublicSaleConfigStruct = {
    startTime: PromiseOrValue<BigNumberish>
    price: PromiseOrValue<BigNumberish>
  }

  export type PublicSaleConfigStructOutput = [BigNumber, BigNumber] & {
    startTime: BigNumber
    price: BigNumber
  }

  export type RevealConfigStruct = {
    startTime: PromiseOrValue<BigNumberish>
    ambrusGenesisContractAddress: PromiseOrValue<string>
  }

  export type RevealConfigStructOutput = [BigNumber, string] & {
    startTime: BigNumber
    ambrusGenesisContractAddress: string
  }
}

export interface AmbrusGenesisPeriodInterface extends utils.Interface {
  functions: {
    'MAX_TOKEN()': FunctionFragment
    'MAX_TOKEN_PER_MINT()': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'baseURI()': FunctionFragment
    'contractSealed()': FunctionFragment
    'emergencyPause()': FunctionFragment
    'getApproved(uint256)': FunctionFragment
    'getPublicSalePrice()': FunctionFragment
    'getWhitelistSalePrice()': FunctionFragment
    'giveaway(address,uint64)': FunctionFragment
    'isApprovedForAll(address,address)': FunctionFragment
    'isPublicSaleEnabled()': FunctionFragment
    'isRevealEnabled()': FunctionFragment
    'isWhitelistAddress(address,bytes32[])': FunctionFragment
    'isWhitelistSaleEnabled()': FunctionFragment
    'name()': FunctionFragment
    'owner()': FunctionFragment
    'ownerOf(uint256)': FunctionFragment
    'paused()': FunctionFragment
    'publicSale(uint64)': FunctionFragment
    'publicSaleConfig()': FunctionFragment
    'renounceOwnership()': FunctionFragment
    'reveal(uint256)': FunctionFragment
    'revealConfig()': FunctionFragment
    'safeTransferFrom(address,address,uint256)': FunctionFragment
    'safeTransferFrom(address,address,uint256,bytes)': FunctionFragment
    'sealContract()': FunctionFragment
    'setApprovalForAll(address,bool)': FunctionFragment
    'setBaseURI(string)': FunctionFragment
    'setPublicSaleConfig((uint256,uint256))': FunctionFragment
    'setRevealConfig((uint64,address))': FunctionFragment
    'setWhitelistSaleConfig((uint64,uint256,uint256,bytes32,uint256))': FunctionFragment
    'supportsInterface(bytes4)': FunctionFragment
    'symbol()': FunctionFragment
    'tokenURI(uint256)': FunctionFragment
    'totalMinted()': FunctionFragment
    'totalSupply()': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'transferOwnership(address)': FunctionFragment
    'unpause()': FunctionFragment
    'whitelistSale(uint64,bytes32[])': FunctionFragment
    'whitelistSaleConfig()': FunctionFragment
    'withdraw()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'MAX_TOKEN'
      | 'MAX_TOKEN_PER_MINT'
      | 'approve'
      | 'balanceOf'
      | 'baseURI'
      | 'contractSealed'
      | 'emergencyPause'
      | 'getApproved'
      | 'getPublicSalePrice'
      | 'getWhitelistSalePrice'
      | 'giveaway'
      | 'isApprovedForAll'
      | 'isPublicSaleEnabled'
      | 'isRevealEnabled'
      | 'isWhitelistAddress'
      | 'isWhitelistSaleEnabled'
      | 'name'
      | 'owner'
      | 'ownerOf'
      | 'paused'
      | 'publicSale'
      | 'publicSaleConfig'
      | 'renounceOwnership'
      | 'reveal'
      | 'revealConfig'
      | 'safeTransferFrom(address,address,uint256)'
      | 'safeTransferFrom(address,address,uint256,bytes)'
      | 'sealContract'
      | 'setApprovalForAll'
      | 'setBaseURI'
      | 'setPublicSaleConfig'
      | 'setRevealConfig'
      | 'setWhitelistSaleConfig'
      | 'supportsInterface'
      | 'symbol'
      | 'tokenURI'
      | 'totalMinted'
      | 'totalSupply'
      | 'transferFrom'
      | 'transferOwnership'
      | 'unpause'
      | 'whitelistSale'
      | 'whitelistSaleConfig'
      | 'withdraw'
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'MAX_TOKEN', values?: undefined): string
  encodeFunctionData(functionFragment: 'MAX_TOKEN_PER_MINT', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'approve',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [PromiseOrValue<string>]): string
  encodeFunctionData(functionFragment: 'baseURI', values?: undefined): string
  encodeFunctionData(functionFragment: 'contractSealed', values?: undefined): string
  encodeFunctionData(functionFragment: 'emergencyPause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'getApproved',
    values: [PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(functionFragment: 'getPublicSalePrice', values?: undefined): string
  encodeFunctionData(functionFragment: 'getWhitelistSalePrice', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'giveaway',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'isApprovedForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'isPublicSaleEnabled', values?: undefined): string
  encodeFunctionData(functionFragment: 'isRevealEnabled', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'isWhitelistAddress',
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string
  encodeFunctionData(functionFragment: 'isWhitelistSaleEnabled', values?: undefined): string
  encodeFunctionData(functionFragment: 'name', values?: undefined): string
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string
  encodeFunctionData(functionFragment: 'ownerOf', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string
  encodeFunctionData(functionFragment: 'publicSale', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'publicSaleConfig', values?: undefined): string
  encodeFunctionData(functionFragment: 'renounceOwnership', values?: undefined): string
  encodeFunctionData(functionFragment: 'reveal', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'revealConfig', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string
  encodeFunctionData(functionFragment: 'sealContract', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'setApprovalForAll',
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string
  encodeFunctionData(functionFragment: 'setBaseURI', values: [PromiseOrValue<string>]): string
  encodeFunctionData(
    functionFragment: 'setPublicSaleConfig',
    values: [AmbrusGenesisPeriod.PublicSaleConfigStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'setRevealConfig',
    values: [AmbrusGenesisPeriod.RevealConfigStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'setWhitelistSaleConfig',
    values: [AmbrusGenesisPeriod.WhitelistSaleConfigStruct]
  ): string
  encodeFunctionData(
    functionFragment: 'supportsInterface',
    values: [PromiseOrValue<BytesLike>]
  ): string
  encodeFunctionData(functionFragment: 'symbol', values?: undefined): string
  encodeFunctionData(functionFragment: 'tokenURI', values: [PromiseOrValue<BigNumberish>]): string
  encodeFunctionData(functionFragment: 'totalMinted', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'transferFrom',
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'whitelistSale',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>[]]
  ): string
  encodeFunctionData(functionFragment: 'whitelistSaleConfig', values?: undefined): string
  encodeFunctionData(functionFragment: 'withdraw', values?: undefined): string

  decodeFunctionResult(functionFragment: 'MAX_TOKEN', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MAX_TOKEN_PER_MINT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'baseURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'contractSealed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'emergencyPause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getApproved', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPublicSalePrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getWhitelistSalePrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'giveaway', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isApprovedForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPublicSaleEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isRevealEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isWhitelistAddress', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isWhitelistSaleEnabled', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'ownerOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'publicSale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'publicSaleConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'reveal', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revealConfig', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256)',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'safeTransferFrom(address,address,uint256,bytes)',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'sealContract', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setApprovalForAll', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setBaseURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setPublicSaleConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setRevealConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setWhitelistSaleConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'symbol', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenURI', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalMinted', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistSale', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'whitelistSaleConfig', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'ApprovalForAll(address,address,bool)': EventFragment
    'BaseURIChanged(string)': EventFragment
    'ContractSealed()': EventFragment
    'OwnershipTransferred(address,address)': EventFragment
    'Paused(address)': EventFragment
    'PublicSaleConfigChanged(tuple)': EventFragment
    'RevealConfigChanged(tuple)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
    'Unpaused(address)': EventFragment
    'WhitelistSaleConfigChanged(tuple)': EventFragment
    'Withdraw(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ApprovalForAll'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'BaseURIChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ContractSealed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'PublicSaleConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RevealConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Unpaused'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'WhitelistSaleConfigChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdraw'): EventFragment
}

export interface ApprovalEventObject {
  owner: string
  approved: string
  tokenId: BigNumber
}
export type ApprovalEvent = TypedEvent<[string, string, BigNumber], ApprovalEventObject>

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>

export interface ApprovalForAllEventObject {
  owner: string
  operator: string
  approved: boolean
}
export type ApprovalForAllEvent = TypedEvent<[string, string, boolean], ApprovalForAllEventObject>

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>

export interface BaseURIChangedEventObject {
  newBaseURI: string
}
export type BaseURIChangedEvent = TypedEvent<[string], BaseURIChangedEventObject>

export type BaseURIChangedEventFilter = TypedEventFilter<BaseURIChangedEvent>

export interface ContractSealedEventObject {}
export type ContractSealedEvent = TypedEvent<[], ContractSealedEventObject>

export type ContractSealedEventFilter = TypedEventFilter<ContractSealedEvent>

export interface OwnershipTransferredEventObject {
  previousOwner: string
  newOwner: string
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>

export interface PausedEventObject {
  account: string
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>

export type PausedEventFilter = TypedEventFilter<PausedEvent>

export interface PublicSaleConfigChangedEventObject {
  config: AmbrusGenesisPeriod.PublicSaleConfigStructOutput
}
export type PublicSaleConfigChangedEvent = TypedEvent<
  [AmbrusGenesisPeriod.PublicSaleConfigStructOutput],
  PublicSaleConfigChangedEventObject
>

export type PublicSaleConfigChangedEventFilter = TypedEventFilter<PublicSaleConfigChangedEvent>

export interface RevealConfigChangedEventObject {
  config: AmbrusGenesisPeriod.RevealConfigStructOutput
}
export type RevealConfigChangedEvent = TypedEvent<
  [AmbrusGenesisPeriod.RevealConfigStructOutput],
  RevealConfigChangedEventObject
>

export type RevealConfigChangedEventFilter = TypedEventFilter<RevealConfigChangedEvent>

export interface TransferEventObject {
  from: string
  to: string
  tokenId: BigNumber
}
export type TransferEvent = TypedEvent<[string, string, BigNumber], TransferEventObject>

export type TransferEventFilter = TypedEventFilter<TransferEvent>

export interface UnpausedEventObject {
  account: string
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>

export interface WhitelistSaleConfigChangedEventObject {
  config: AmbrusGenesisPeriod.WhitelistSaleConfigStructOutput
}
export type WhitelistSaleConfigChangedEvent = TypedEvent<
  [AmbrusGenesisPeriod.WhitelistSaleConfigStructOutput],
  WhitelistSaleConfigChangedEventObject
>

export type WhitelistSaleConfigChangedEventFilter =
  TypedEventFilter<WhitelistSaleConfigChangedEvent>

export interface WithdrawEventObject {
  account: string
  amount: BigNumber
}
export type WithdrawEvent = TypedEvent<[string, BigNumber], WithdrawEventObject>

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>

export interface AmbrusGenesisPeriod extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: AmbrusGenesisPeriodInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    MAX_TOKEN(overrides?: CallOverrides): Promise<[BigNumber]>

    MAX_TOKEN_PER_MINT(overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[BigNumber]>

    baseURI(overrides?: CallOverrides): Promise<[string]>

    contractSealed(overrides?: CallOverrides): Promise<[boolean]>

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    getPublicSalePrice(overrides?: CallOverrides): Promise<[BigNumber]>

    getWhitelistSalePrice(overrides?: CallOverrides): Promise<[BigNumber]>

    giveaway(
      address_: PromiseOrValue<string>,
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isPublicSaleEnabled(overrides?: CallOverrides): Promise<[boolean]>

    isRevealEnabled(overrides?: CallOverrides): Promise<[boolean]>

    isWhitelistAddress(
      address_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isWhitelistSaleEnabled(overrides?: CallOverrides): Promise<[boolean]>

    name(overrides?: CallOverrides): Promise<[string]>

    owner(overrides?: CallOverrides): Promise<[string]>

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    paused(overrides?: CallOverrides): Promise<[boolean]>

    publicSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    publicSaleConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { startTime: BigNumber; price: BigNumber }>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    reveal(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    revealConfig(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        startTime: BigNumber
        ambrusGenesisContractAddress: string
      }
    >

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    sealContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setPublicSaleConfig(
      config_: AmbrusGenesisPeriod.PublicSaleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setRevealConfig(
      config_: AmbrusGenesisPeriod.RevealConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    setWhitelistSaleConfig(
      config_: AmbrusGenesisPeriod.WhitelistSaleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    symbol(overrides?: CallOverrides): Promise<[string]>

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>

    totalMinted(overrides?: CallOverrides): Promise<[BigNumber]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

    whitelistSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    whitelistSaleConfig(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        mintQuota: BigNumber
        startTime: BigNumber
        endTime: BigNumber
        merkleRoot: string
        price: BigNumber
      }
    >

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  MAX_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

  MAX_TOKEN_PER_MINT(overrides?: CallOverrides): Promise<BigNumber>

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

  baseURI(overrides?: CallOverrides): Promise<string>

  contractSealed(overrides?: CallOverrides): Promise<boolean>

  emergencyPause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  getPublicSalePrice(overrides?: CallOverrides): Promise<BigNumber>

  getWhitelistSalePrice(overrides?: CallOverrides): Promise<BigNumber>

  giveaway(
    address_: PromiseOrValue<string>,
    numberOfTokens_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>

  isPublicSaleEnabled(overrides?: CallOverrides): Promise<boolean>

  isRevealEnabled(overrides?: CallOverrides): Promise<boolean>

  isWhitelistAddress(
    address_: PromiseOrValue<string>,
    signature_: PromiseOrValue<BytesLike>[],
    overrides?: CallOverrides
  ): Promise<boolean>

  isWhitelistSaleEnabled(overrides?: CallOverrides): Promise<boolean>

  name(overrides?: CallOverrides): Promise<string>

  owner(overrides?: CallOverrides): Promise<string>

  ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  paused(overrides?: CallOverrides): Promise<boolean>

  publicSale(
    numberOfTokens_: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  publicSaleConfig(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { startTime: BigNumber; price: BigNumber }>

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  reveal(
    tokenId_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  revealConfig(overrides?: CallOverrides): Promise<
    [BigNumber, string] & {
      startTime: BigNumber
      ambrusGenesisContractAddress: string
    }
  >

  'safeTransferFrom(address,address,uint256)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  'safeTransferFrom(address,address,uint256,bytes)'(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  sealContract(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setBaseURI(
    baseURI_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setPublicSaleConfig(
    config_: AmbrusGenesisPeriod.PublicSaleConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setRevealConfig(
    config_: AmbrusGenesisPeriod.RevealConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  setWhitelistSaleConfig(
    config_: AmbrusGenesisPeriod.WhitelistSaleConfigStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>

  symbol(overrides?: CallOverrides): Promise<string>

  tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

  totalMinted(overrides?: CallOverrides): Promise<BigNumber>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  whitelistSale(
    numberOfTokens_: PromiseOrValue<BigNumberish>,
    signature_: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  whitelistSaleConfig(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      mintQuota: BigNumber
      startTime: BigNumber
      endTime: BigNumber
      merkleRoot: string
      price: BigNumber
    }
  >

  withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<ContractTransaction>

  callStatic: {
    MAX_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    MAX_TOKEN_PER_MINT(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    baseURI(overrides?: CallOverrides): Promise<string>

    contractSealed(overrides?: CallOverrides): Promise<boolean>

    emergencyPause(overrides?: CallOverrides): Promise<void>

    getApproved(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    getPublicSalePrice(overrides?: CallOverrides): Promise<BigNumber>

    getWhitelistSalePrice(overrides?: CallOverrides): Promise<BigNumber>

    giveaway(
      address_: PromiseOrValue<string>,
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>

    isPublicSaleEnabled(overrides?: CallOverrides): Promise<boolean>

    isRevealEnabled(overrides?: CallOverrides): Promise<boolean>

    isWhitelistAddress(
      address_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<boolean>

    isWhitelistSaleEnabled(overrides?: CallOverrides): Promise<boolean>

    name(overrides?: CallOverrides): Promise<string>

    owner(overrides?: CallOverrides): Promise<string>

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    paused(overrides?: CallOverrides): Promise<boolean>

    publicSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    publicSaleConfig(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { startTime: BigNumber; price: BigNumber }>

    renounceOwnership(overrides?: CallOverrides): Promise<void>

    reveal(tokenId_: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    revealConfig(overrides?: CallOverrides): Promise<
      [BigNumber, string] & {
        startTime: BigNumber
        ambrusGenesisContractAddress: string
      }
    >

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>

    sealContract(overrides?: CallOverrides): Promise<void>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>

    setBaseURI(baseURI_: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    setPublicSaleConfig(
      config_: AmbrusGenesisPeriod.PublicSaleConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>

    setRevealConfig(
      config_: AmbrusGenesisPeriod.RevealConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>

    setWhitelistSaleConfig(
      config_: AmbrusGenesisPeriod.WhitelistSaleConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>

    symbol(overrides?: CallOverrides): Promise<string>

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    transferOwnership(newOwner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>

    unpause(overrides?: CallOverrides): Promise<void>

    whitelistSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>

    whitelistSaleConfig(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        mintQuota: BigNumber
        startTime: BigNumber
        endTime: BigNumber
        merkleRoot: string
        price: BigNumber
      }
    >

    withdraw(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    'Approval(address,address,uint256)'(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter

    'ApprovalForAll(address,address,bool)'(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter

    'BaseURIChanged(string)'(newBaseURI?: null): BaseURIChangedEventFilter
    BaseURIChanged(newBaseURI?: null): BaseURIChangedEventFilter

    'ContractSealed()'(): ContractSealedEventFilter
    ContractSealed(): ContractSealedEventFilter

    'OwnershipTransferred(address,address)'(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter

    'Paused(address)'(account?: null): PausedEventFilter
    Paused(account?: null): PausedEventFilter

    'PublicSaleConfigChanged(tuple)'(config?: null): PublicSaleConfigChangedEventFilter
    PublicSaleConfigChanged(config?: null): PublicSaleConfigChangedEventFilter

    'RevealConfigChanged(tuple)'(config?: null): RevealConfigChangedEventFilter
    RevealConfigChanged(config?: null): RevealConfigChangedEventFilter

    'Transfer(address,address,uint256)'(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter

    'Unpaused(address)'(account?: null): UnpausedEventFilter
    Unpaused(account?: null): UnpausedEventFilter

    'WhitelistSaleConfigChanged(tuple)'(config?: null): WhitelistSaleConfigChangedEventFilter
    WhitelistSaleConfigChanged(config?: null): WhitelistSaleConfigChangedEventFilter

    'Withdraw(address,uint256)'(
      account?: PromiseOrValue<string> | null,
      amount?: null
    ): WithdrawEventFilter
    Withdraw(account?: PromiseOrValue<string> | null, amount?: null): WithdrawEventFilter
  }

  estimateGas: {
    MAX_TOKEN(overrides?: CallOverrides): Promise<BigNumber>

    MAX_TOKEN_PER_MINT(overrides?: CallOverrides): Promise<BigNumber>

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    balanceOf(owner: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>

    baseURI(overrides?: CallOverrides): Promise<BigNumber>

    contractSealed(overrides?: CallOverrides): Promise<BigNumber>

    emergencyPause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getPublicSalePrice(overrides?: CallOverrides): Promise<BigNumber>

    getWhitelistSalePrice(overrides?: CallOverrides): Promise<BigNumber>

    giveaway(
      address_: PromiseOrValue<string>,
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isPublicSaleEnabled(overrides?: CallOverrides): Promise<BigNumber>

    isRevealEnabled(overrides?: CallOverrides): Promise<BigNumber>

    isWhitelistAddress(
      address_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isWhitelistSaleEnabled(overrides?: CallOverrides): Promise<BigNumber>

    name(overrides?: CallOverrides): Promise<BigNumber>

    owner(overrides?: CallOverrides): Promise<BigNumber>

    ownerOf(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    paused(overrides?: CallOverrides): Promise<BigNumber>

    publicSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    publicSaleConfig(overrides?: CallOverrides): Promise<BigNumber>

    renounceOwnership(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    reveal(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    revealConfig(overrides?: CallOverrides): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    sealContract(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setPublicSaleConfig(
      config_: AmbrusGenesisPeriod.PublicSaleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setRevealConfig(
      config_: AmbrusGenesisPeriod.RevealConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    setWhitelistSaleConfig(
      config_: AmbrusGenesisPeriod.WhitelistSaleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    symbol(overrides?: CallOverrides): Promise<BigNumber>

    tokenURI(tokenId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>

    totalMinted(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    unpause(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>

    whitelistSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    whitelistSaleConfig(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    MAX_TOKEN(overrides?: CallOverrides): Promise<PopulatedTransaction>

    MAX_TOKEN_PER_MINT(overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>

    contractSealed(overrides?: CallOverrides): Promise<PopulatedTransaction>

    emergencyPause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getPublicSalePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getWhitelistSalePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>

    giveaway(
      address_: PromiseOrValue<string>,
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isPublicSaleEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isRevealEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    isWhitelistAddress(
      address_: PromiseOrValue<string>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isWhitelistSaleEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>

    publicSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    publicSaleConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    reveal(
      tokenId_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    revealConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    'safeTransferFrom(address,address,uint256,bytes)'(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    sealContract(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setBaseURI(
      baseURI_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setPublicSaleConfig(
      config_: AmbrusGenesisPeriod.PublicSaleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setRevealConfig(
      config_: AmbrusGenesisPeriod.RevealConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    setWhitelistSaleConfig(
      config_: AmbrusGenesisPeriod.WhitelistSaleConfigStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    totalMinted(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    whitelistSale(
      numberOfTokens_: PromiseOrValue<BigNumberish>,
      signature_: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    whitelistSaleConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
